import { useState } from 'react';
import { useFormData } from '@/hooks/useFormData';
import { useNumberInput } from '@/hooks/useNumberInput';
import { useProgress } from '@/hooks/useProgress';
import { useCollapsibleSections } from '@/hooks/useCollapsibleSections';
import { useCurrency } from '@/hooks/useCurrency';
import RegionRecommendationHeader from '@/components/region/RegionRecommendationHeader';
import RegionForm from '@/components/region/RegionForm';
import RegionMapCard from '@/components/region/RegionMapCard';
import RegionRecommendationCard from '@/components/region/RegionRecommendationCard';
import { mockRegionRecommendations } from '@/mocks/regionData';
import type { RegionInfo } from '@/types/region';

const RegionRecommendation = () => {
  const { formData, handleInputChange } = useFormData({
    budget: '',
    childAge: '',
    workLocation: '',
    priority: '',
    transportType: '',
    lifestyle: '',
    familySize: '',
  });

  const [recommendations, setRecommendations] = useState<RegionInfo[]>([]);
  const [showResults, setShowResults] = useState(false);

  // ÏÑπÏÖòÎ≥Ñ Ï†ëÍ∏∞/ÌéºÏπòÍ∏∞ ÏÉÅÌÉú
  const { expandedSections, toggleSection } = useCollapsibleSections({
    basic: true,
    preferences: false,
  });

  // Ïà´Ïûê ÏûÖÎ†• Í≤ÄÏ¶ù ÌõÖ ÏÇ¨Ïö©
  const { handleNumberKeyDown, handleNumberPaste } = useNumberInput();

  // ÌÜµÌôî Ìè¨Îß∑ÌåÖ ÌõÖ ÏÇ¨Ïö©
  const { formatCurrency } = useCurrency();

  // ÏßÑÌñâÎ•† Í≥ÑÏÇ∞ Î∞è Í≤©Î†§ Î©îÏãúÏßÄ ÌõÖ ÏÇ¨Ïö©
  const requiredFields = [
    'budget',
    'familySize',
    'childAge',
    'workLocation',
    'priority',
    'transportType',
    'lifestyle',
  ];

  const { progress, encouragementMessage } = useProgress({
    formData,
    requiredFields,
    encouragementMessages: {
      start: {
        message: 'ÏôÑÎ≤ΩÌïú Ïö∞Î¶¨ ÎèôÎÑ§Î•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî! Í∏∞Î≥∏ Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî üó∫Ô∏è',
        color: 'text-orange-600',
        icon: 'üéØ',
      },
      progress30: {
        message: 'Ï¢ãÏùÄ Ï∂úÎ∞úÏù¥ÏóêÏöî! Í≥ÑÏÜç ÏûÖÎ†•Ìï¥ÏÑú ÎßûÏ∂§ ÏßÄÏó≠ÏùÑ Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî ‚ú®',
        color: 'text-green-600',
        icon: 'üìù',
      },
      progress70: {
        message:
          'Ï†àÎ∞ò ÎÑòÏóàÏñ¥Ïöî! Ï°∞Í∏àÎßå Îçî ÏûÖÎ†•ÌïòÎ©¥ 10Í∞ÄÏßÄ ÏßÄÌëúÎ°ú Î∂ÑÏÑùÌïú Í≤∞Í≥ºÎ•º ÌôïÏù∏Ìï¥Ïöî üí™',
        color: 'text-blue-600',
        icon: 'üìä',
      },
      nearComplete: {
        message:
          'Í±∞Ïùò ÏôÑÏÑ±! ÎßàÏßÄÎßâ ÏÑ†Ìò∏ÎèÑÎßå ÏûÖÎ†•ÌïòÎ©¥ Google ÏßÄÎèÑÎ°ú ÌôïÏù∏Ìï¥ÎìúÎ†§Ïöî üî•',
        color: 'text-purple-600',
        icon: 'üöÄ',
      },
      complete: {
        message:
          'ÏôÑÎ≤ΩÌï¥Ïöî! Ïù¥Ï†ú 3Í∞ú ÏßÄÏó≠ÏùÑ ÎπÑÍµêÌïòÍ≥† Google ÏßÄÎèÑÏóêÏÑú ÌôïÏù∏ÌïòÏÑ∏Ïöî! üéâ',
        color: 'text-green-600',
        icon: '‚úÖ',
      },
    },
  });

  const generateRecommendations = () => {
    setRecommendations(mockRegionRecommendations);
    setShowResults(true);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50">
      <RegionRecommendationHeader />

      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <RegionForm
            formData={formData}
            handleInputChange={handleInputChange}
            handleNumberKeyDown={handleNumberKeyDown}
            handleNumberPaste={handleNumberPaste}
            formatCurrency={formatCurrency}
            expandedSections={expandedSections}
            toggleSection={toggleSection}
            progress={progress}
            encouragementMessage={encouragementMessage}
            onGenerateRecommendations={generateRecommendations}
          />

          <RegionMapCard
            showResults={showResults}
            recommendations={recommendations}
          />
        </div>

        {/* Recommendations */}
        {showResults && (
          <div className="mt-8 space-y-6">
            <h3 className="text-2xl font-bold text-gray-900">
              Ï†ïÎ∞Ä ÏßÄÏó≠ Î∂ÑÏÑù Í≤∞Í≥º
            </h3>

            {recommendations.map((region, index) => (
              <RegionRecommendationCard key={index} region={region} />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default RegionRecommendation;
