import { useState } from 'react';
import { useFormData } from '@/hooks/useFormData';
import { useNumberInput } from '@/hooks/useNumberInput';
import { useProgress } from '@/hooks/useProgress';
import { useCollapsibleSections } from '@/hooks/useCollapsibleSections';
import { useCurrency } from '@/hooks/useCurrency';
import useAssetCalculation from '@/hooks/useAssetCalculation';
import AssetSimulationHeader from '@/components/asset/AssetSimulationHeader';
import AssetForm from '@/components/asset/AssetForm';
import AssetTargetCard from '@/components/asset/AssetTargetCard';
import AssetScenarioChart from '@/components/asset/AssetScenarioChart';
import AssetAnalysisCharts from '@/components/asset/AssetAnalysisCharts';
import type { SimulationData } from '@/types/asset';

const AssetSimulation = () => {
  const { formData, handleInputChange } = useFormData({
    monthlyIncome: '',
    monthlyExpense: '',
    currentAssets: '',
    targetAmount: '',
    incomeGrowthRate: '3',
    expenseGrowthRate: '2',
    investmentReturn: '5',
    targetHousePrice: '50000',
    customIncomeGrowthRate: '',
    customExpenseGrowthRate: '',
    customInvestmentReturn: '',
  });

  const [simulationData, setSimulationData] = useState<SimulationData[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [selectedScenario, setSelectedScenario] = useState<string>('average');

  // ÏÑπÏÖòÎ≥Ñ Ï†ëÍ∏∞/ÌéºÏπòÍ∏∞ ÏÉÅÌÉú
  const { expandedSections, toggleSection } = useCollapsibleSections({
    basic: true,
    future: false,
  });

  // Ïà´Ïûê ÏûÖÎ†• Í≤ÄÏ¶ù ÌõÖ ÏÇ¨Ïö©
  const { handleNumberKeyDown, handleNumberPaste } = useNumberInput();

  // ÏßÑÌñâÎ•† Í≥ÑÏÇ∞ Î∞è Í≤©Î†§ Î©îÏãúÏßÄ ÌõÖ ÏÇ¨Ïö©
  const requiredFields = [
    'monthlyIncome',
    'monthlyExpense',
    'currentAssets',
    'targetHousePrice',
    'incomeGrowthRate',
    'expenseGrowthRate',
    'investmentReturn',
  ];

  const { progress, encouragementMessage } = useProgress({
    formData: {
      ...formData,
      // Select ÌïÑÎìúÎäî Í∏∞Î≥∏Í∞íÏù¥ ÏûàÏúºÎØÄÎ°ú Ìï≠ÏÉÅ Ï±ÑÏõåÏßÑ Í≤ÉÏúºÎ°ú Í∞ÑÏ£º
      incomeGrowthRate: formData.incomeGrowthRate || '3',
      expenseGrowthRate: formData.expenseGrowthRate || '2',
      investmentReturn: formData.investmentReturn || '5',
    },
    requiredFields,
    encouragementMessages: {
      start: {
        message: 'ÎØ∏Îûò ÏûêÏÇ∞ÏùÑ Ï†ïÎ∞Ä ÏòàÏ∏°Ìï¥Î≥¥ÏÑ∏Ïöî! ÌòÑÏû¨ ÏÉÅÌô©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî üí∞',
        color: 'text-green-600',
        icon: 'üìä',
      },
      progress30: {
        message:
          'Ï¢ãÏùÄ ÏãúÏûëÏù¥ÏóêÏöî! Í≥ÑÏÜç ÏûÖÎ†•Ìï¥ÏÑú 15ÎÖÑ ÌõÑ ÏûêÏÇ∞ÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî ‚ú®',
        color: 'text-blue-600',
        icon: 'üìà',
      },
      progress70: {
        message:
          'Ï†àÎ∞ò ÎÑòÏóàÏñ¥Ïöî! ÎØ∏Îûò Ï†ÑÎßùÍπåÏßÄ ÏûÖÎ†•ÌïòÎ©¥ 3Í∞ÄÏßÄ ÏãúÎÇòÎ¶¨Ïò§Î°ú Î∂ÑÏÑùÌï¥ÎìúÎ†§Ïöî üí™',
        color: 'text-purple-600',
        icon: 'üîÆ',
      },
      nearComplete: {
        message:
          'Í±∞Ïùò ÏôÑÏÑ±! ÎßàÏßÄÎßâ ÏÑ§Ï†ïÎßå ÏûÖÎ†•ÌïòÎ©¥ ÏÉÅÏÑ∏Ìïú Ï∞®Ìä∏ÏôÄ Ïã§Ï≤úÎ≤ïÏùÑ ÌôïÏù∏Ìï¥Ïöî üî•',
        color: 'text-orange-600',
        icon: 'üöÄ',
      },
      complete: {
        message:
          'ÏôÑÎ≤ΩÌï¥Ïöî! Ïù¥Ï†ú 3Í∞ÄÏßÄ ÏãúÎÇòÎ¶¨Ïò§ÏôÄ Íµ¨Ï≤¥Ï†ÅÏù∏ Ïã§Ï≤úÎ≤ïÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî! üéâ',
        color: 'text-green-600',
        icon: '‚úÖ',
      },
    },
  });

  // ÌÜµÌôî Ìè¨Îß∑ÌåÖ ÌõÖ ÏÇ¨Ïö©
  const { formatCurrency } = useCurrency();

  // ÏûêÏÇ∞ Í≥ÑÏÇ∞ Î°úÏßÅ ÌõÖ ÏÇ¨Ïö©
  const {
    generateDetailedSimulation,
    getScenarioData,
    getTargetAchievementYear,
    getAssetBreakdown,
  } = useAssetCalculation({ formData });

  const handleGenerateSimulation = () => {
    const data = generateDetailedSimulation();
    setSimulationData(data);
    setShowResults(true);
  };

  const handleGetScenarioData = (scenario: string) => {
    return getScenarioData(scenario, simulationData);
  };

  const handleGetTargetAchievementYear = (scenario: string) => {
    return getTargetAchievementYear(scenario, simulationData);
  };

  const handleGetAssetBreakdown = () => {
    return getAssetBreakdown(simulationData);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50">
      <AssetSimulationHeader />

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Form */}
          <AssetForm
            formData={formData}
            handleInputChange={handleInputChange}
            handleNumberKeyDown={handleNumberKeyDown}
            handleNumberPaste={handleNumberPaste}
            formatCurrency={formatCurrency}
            expandedSections={expandedSections}
            toggleSection={toggleSection}
            progress={progress}
            encouragementMessage={encouragementMessage}
            onGenerateSimulation={handleGenerateSimulation}
          />

          {/* Results Overview */}
          {showResults && (
            <AssetTargetCard
              formData={formData}
              formatCurrency={formatCurrency}
              getTargetAchievementYear={handleGetTargetAchievementYear}
            />
          )}
        </div>

        {/* Detailed Results */}
        {showResults && (
          <div className="mt-8 space-y-8">
            {/* Scenario Charts */}
            <AssetScenarioChart
              selectedScenario={selectedScenario}
              onScenarioChange={setSelectedScenario}
              getScenarioData={handleGetScenarioData}
              formatCurrency={formatCurrency}
            />

            {/* ÏûêÏÇ∞ Íµ¨ÏÑ± Î∂ÑÏÑù */}
            <AssetAnalysisCharts
              selectedScenario={selectedScenario}
              getScenarioData={handleGetScenarioData}
              getAssetBreakdown={handleGetAssetBreakdown}
              formatCurrency={formatCurrency}
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default AssetSimulation;
